import telebot
from telebot import types
import requests
import config
import json
from geopy.geocoders import Nominatim
from bs4 import BeautifulSoup
import datetime

bot = telebot.TeleBot(config.TOKEN)


@bot.message_handler(commands=['start', 'hi', 'hello'])  # –°—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –Ω–∏–∂–µ
def main(message):
    bot.send_message(message.chat.id,
                     f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–Ø –ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å –º–æ–π–∫–æ–π —Ç–≤–æ–µ–π –º–∞—à–∏–Ω—ã")


@bot.message_handler(commands=["geo"])
def geo(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_geo = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
    button_back = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
    keyboard.add(button_geo)
    keyboard.add(button_back)
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", reply_markup=keyboard)
    telebot.types.ReplyKeyboardRemove()



@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, "<b>–í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                                      "/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                                      "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞\n"
                                      "/geo - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –±–æ—Ç—É\n"
                                      "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", parse_mode='html')


@bot.message_handler(content_types=["location"])
def location(message):
    if message.location is not None:
        print((message.location.latitude, message.location.longitude))
        lat = message.location.latitude
        lon = message.location.longitude
        res1 = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={config.API}&units=metric&lang=ru")
        data = json.loads(res1.text)
        temp = data["main"]["temp"]
        # description = data['weather'][0]['description']
        area = data['name']
        # icon = data["weather"][0]["icon"]
        feeling_temp = data["main"]["feels_like"]

        geolocator = Nominatim(user_agent="my_app")
        location = geolocator.reverse(f"{lat}, {lon}", language='en')
        city = location.raw['address']['city']
        country = location.raw['address']['country']
        location_ru = geolocator.reverse(f"{lat}, {lon}", language='ru')
        city_ru = location_ru.raw['address']['city']
        country_ru = location_ru.raw['address']['country']

        url2 = f"https://meteoinfo.ru/forecasts/{str.lower(country)}/{str.lower(city)}-area/{str.lower(city)}"
        r = requests.get(url2)
        soup = BeautifulSoup(r.text, 'html.parser')
        mas = []
        quotes = soup.find_all('td', class_='td_short_gr')
        for quote in quotes:
            mas.append(quote.text)
        print(mas)


        #–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –∏ –Ω–æ—á—å
        den = []
        noch = []
        for i in range(5):
            den.append(mas[i + 25])
            noch.append(mas[i + 66])


        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–∞–¥–∫–∏ –∏ –≤—ã–≤–æ–¥ —ç–º–æ–¥–∑–∏
        emoji = []
        for i in range(5):
            if ("—Å–Ω–µ–≥" in den[i]) or ("—Å–Ω–µ–≥" in noch[i]) or ('–º–µ—Ç–µ–ª—å' in den[i]) or ('–º–µ—Ç–µ–ª—å' in noch[i]) or (
                    '–¥–æ–∂–¥—å' in den[i]) or ('–ª–∏–≤–µ–Ω—å' in den[i]) or ('–¥–æ–∂–¥–∏' in den[i]) or ('–ª–∏–≤–Ω–∏' in den[i]) or (
                    '–∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å' in den[i]) or ('–∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Å–∞–¥–∫–∏' in den[i]) or (
                    '–¥–æ–∂–¥—å' in noch[i]) or (
                    '–ª–∏–≤–µ–Ω—å' in noch[i]) or ('–¥–æ–∂–¥–∏' in noch[i]) or ('–ª–∏–≤–Ω–∏' in noch[i]) or (
                    '–∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å' in noch[i]) or ('–∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Å–∞–¥–∫–∏' in noch[i]):
                emoji.append("üåß")
            else:
                emoji.append("‚òÄÔ∏è")


        # –í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–µ—Å—è—Ü, –¥–µ–Ω—å –∏ —Ç.–¥
        current_date = datetime.datetime.now()
        today = datetime.date.today()
        weekday = today.weekday()
        days = {0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 1: "–í—Ç–æ—Ä–Ω–∏–∫", 2: "–°—Ä–µ–¥–∞", 3: "–ß–µ—Ç–≤–µ—Ä–≥", 4: "–ü—è—Ç–Ω–∏—Ü–∞", 5: "C—É–±–±–æ—Ç–∞", 6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
        months = ['', '–Ø–Ω–≤–∞—Ä—è', '–§–µ–≤—Ä–∞–ª—è', '–ú–∞—Ä—Ç–∞', '–ê–ø—Ä–µ–ª—è', '–ú–∞—è', '–ò—é–Ω—è', '–ò—é–ª—è', '–ê–≤–≥—É—Å—Ç–∞', '–°–µ–Ω—Ç—è–±—Ä—è', '–û–∫—Ç—è–±—Ä—è',
                  '–ù–æ—è–±—Ä—è', '–î–µ–∫–∞–±—Ä—è']

        bot.send_message(message.chat.id, f'{country_ru}, {city_ru}, –†–∞–π–æ–Ω {area}\n\n{days[weekday]}, {current_date.day} {months[current_date.month]} {emoji[0]}\n\n–î–µ–Ω—å: {round(float(temp))}¬∞C\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {round(float(feeling_temp))}¬∞C\n{mas[25]}\n'
                                          f'\n–ù–æ—á—å: {mas[58]}C\n{mas[66]}')
        weekday+=1
        for i in range(1,5):
            bot.send_message(message.chat.id, f'\t{days[weekday]}, {current_date.day + i} {months[current_date.month]} {emoji[i]}\n\n–î–µ–Ω—å {mas[i+17]}C\n{mas[i+25]} \n\n–ù–æ—á—å {mas[i+58]}C\n{mas[i+66]}')
            weekday+=1
            if weekday == 7:
                weekday = 0


        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–π–∫–∏ –∏–ª–∏ –Ω–µ—Ç
        if 'üåß' in emoji[:1]:
            bot.send_message(message.chat.id, "–û–∂–∏–¥–∞—é—Ç—Å—è –¥–æ–∂–¥–∏ üåß\n–ú–∞—à–∏–Ω—É –ª—É—á—à–µ –Ω–µ –º—ã—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n–í–æ–∑—å–º–∏ —Å —Å–æ–±–æ–π –∑–æ–Ω—Ç. ‚òî Ô∏è")

        else:
            text = f"[–ë–ª–∏–∂–∞–π—à–∏–µ –∞–≤—Ç–æ–º–æ–π–∫–∏](https://yandex.ru/maps/213/{city}/category/car_wash/184105244/?ll={lon}%2C{lat}&sll={lon}%2C{lat}&z=10)"
            bot.send_message(message.chat.id, "–î–æ–∂–¥–∏ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –Ω–µ –æ–∂–∏–¥–∞—é—Ç—Å—è! ‚òÄÔ∏è")
            bot.send_message(message.chat.id, f"{text}", parse_mode='MarkdownV2')


# @bot.message_handler(commands=['settings'])
# def settings(message):
#     print(123)


@bot.message_handler()
def info(message):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        bot.send_message(message.chat.id, f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é", reply_markup=None)


bot.polling(none_stop=True)
